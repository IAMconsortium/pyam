# This workflow installs the package on several OS & Python versions and runs the tests
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: pytest

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ '**' ]

jobs:
  pytest:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          # use non-Arm64 version for now due to failing numpy
          - macos-13
        python-version:
          - '3.10'
          - '3.11'
          - '3.12'

      fail-fast: false

    defaults:
      run:
        shell: bash

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} py${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      #------------------------------
      #  install & configure poetry
      #------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #------------------------------------
      #  load cached venv if cache exists
      #------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #------------------------
      #  install your project
      #------------------------
      - name: Install library
        run: poetry install --no-interaction --with calamine,dev,optional_io_formats,optional_plotting,tutorials,wbdata

      # run tests without Matplotlib & CodeCode tests on earlier Python versions
      - name: Test with pytest
        if: ${{ matrix.python-version != '3.12' }}
        run: poetry run pytest tests

      # run tests with Matplotlib & CodeCov on latest Python version
      - name: Test with pytest including Matplotlib & Codecov
        if: ${{ matrix.python-version == '3.12' }}
        run: poetry run pytest tests --mpl --cov=./ --cov-report=xml

      - name: Upload coverage report to Codecov
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12' }}
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          env_vars: ${{ matrix.os }} py${{ matrix.python-version }}
